// import mariadb
import mariadb from 'mariadb'

// create a new connection pool
const pool = mariadb.createPool({
    host: 'db',
    user: process.env.MARIA_DB_USER,
    password: process.env.MARIA_DB_PASS,
    database: 'content_dashboard'
})

const getConnection = () => {
    return new Promise(function (resolve, reject) {
        pool.getConnection().then(function (connection) {
            resolve(connection)
        }).catch(function (error) {
            reject(error)
        })
    })
}


//finds user data given a google ID, not the primary key generated by the DB
export const getUserData = async (userId) => {
    let userData
    let conn
    try {
        conn = await pool.getConnection()
        const rows = await conn.query(`SELECT * FROM users WHERE gid = '${userId}'`)
        if (rows.length) {
            userData = rows[0]
        }
    }
    catch (err) {
        console.error(err)
        return null
    }
    finally {
        if (conn) {
            console.log('ending db conn...')
            await conn.end()
        }
        return userData
    }
}

export const confirmUserLogin = async(profile) => {
    let conn
    let allow = false
    try {
        conn = await pool.getConnection()
        const rows = await conn.query(`SELECT gid FROM users WHERE email = '${profile.email}'`)
        if (rows.length) {
            if (!rows[0].gid) {
                // const resp = await conn.query('INSERT INTO users (email) values (?) ')
                const resp = await conn.query('UPDATE users SET gid = ?, name = ?, picture = ? WHERE email = ?', [
                    profile.id,
                    profile.name,
                    profile.picture,
                    profile.email
                ])
                console.log(resp)
            }
            console.log('allow')
            allow = true
        }
    }
    catch (err) {
        console.error(err)
    }
    finally {
        if (conn) {
            console.log('ending db conn...')
            await conn.end()
        }
        console.log(allow)
        return allow ? profile : null
    }
}


// expose the ability to create new connections
export default getConnection
